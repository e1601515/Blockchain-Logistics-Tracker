//adding modules
var express = require('express');
var bodyParser = require('body-parser')
//adding external .js file
var ethereumModule = require('./project_modules/ethereumModule.js');
var cryptoModule = require('./project_modules/cryptoModule.js');
//initializing and starting web server
var app = express();
var port = 8080;
app.set('view engine', 'ejs');
app.listen(port, function() {
 console.log('app started');
});
//account
var mainAccount = "0xf81D26ae334E416d09828312794A3c2F0A81B02A";
var secondaryAccount = "0x42a0193dc3685a83d0c38d129fedb72b7d9262b0";
//NEVER STORE THE PRIVATE KEY IN PUBLISHED SOURCE CODE!!!!
var privateKey = "";
//crypting password
var password = "logistiikka";
txHash="";
//rendering html from ejs template and sending to client
app.get('/', function (req, res) {
  res.render('index');
})
app.get('/getTx', function (req, res) {
  txHash=ethereumModule.getLatest();
  if(txHash!=null&&txHash!="")
  {

  res.send('Latest tx https://ropsten.etherscan.io/tx/'+txHash);
  }
  else {
    res.send('No tx yet during current session.');
  }
})
app.get('/getFromEthereum', function (req, res) {
  txHash=ethereumModule.getLatest();
  if(txHash!=null&&txHash!="")
  {
    var dataToDecrypt = ethereumModule.getFromEthereumFunction(txHash);
    res.send("Packet info fetched from Ethereum: " + cryptoModule.decryptString(dataToDecrypt,password));
  }
  else
  {
    res.send('No tx yet during current session.');
  }
})
//initializing body parser so we can fetch data from text box
app.use(bodyParser.json() );       // to support JSON-encoded bodies
app.use(bodyParser.urlencoded({     // to support URL-encoded bodies
  extended: true
}));
app.use(express.json());       // to support JSON-encoded bodies
app.use(express.urlencoded()); // to support URL-encoded bodies

app.post('/sendpacketid', function (req, res) {
  //Debug in server console
  console.log("String received from the client: "+req.body.packetID);
  packetIdFromClient=req.body.packetID;
  //will be generated by frontend inputs, but hard coding it for now
  var dataToEncrypt="'packetID':'"+packetIdFromClient+"';'deliveryStatus':'sent';'userID':'userID here';'locationName':'locationName here';'gpsLongitude':'gps here';'gpslatitude':'gps here';'locationByGPS':'address/town here'"
  let encryptedDataToSave = cryptoModule.encryptString(dataToEncrypt,password);
  ethereumModule.saveTransaction(privateKey,mainAccount,secondaryAccount,encryptedDataToSave,packetIdFromClient);
  //Post method is too fast for transaction to return its hash identifier in time to use it for saving to database. Database module must be accessed from ethereumModule.
  res.send("Transaction made! Check database for changes. /getTx for hash. /getFromEthereum to get packet info from Ethereum");
})
//this is the command for geth CLI to start the rpc, unless done with parameters when starting geth
//admin.startRPC("127.0.0.1", 8545, "*", "web3,net,eth")
//correct parameters in this case would be
//geth --testnet --fast --rpc --rpcaddr "127.0.0.1" --rpcport 8545 --rpccorsdomain "http://localhost:8545" --rpcapi "web3,net,eth"
