//adding npm modules
var express = require('express');
var bodyParser = require('body-parser')
//adding external .js file
var ethereumModule = require('./project_modules/ethereumModule.js');
var cryptoModule = require('./project_modules/cryptoModule.js');
var databaseModule = require('./project_modules/databaseModule.js');

//initializing and starting web server
var app = express();
var port = 8080;
app.set('view engine', 'ejs');
app.listen(port, function() {
 console.log('Webserver running in port '+port);
 ethereumModule.connectEthereum();
});

//account
//NEVER STORE THE PRIVATE KEY IN PUBLISHED SOURCE CODE!!!!
var fromAccount = "0x15abD8B6b251Dac70B36C456BD880219080E153A";
var privateKey = "";
var cryptoPassword = "logistiikka";
//rendering html from ejs template and sending to client
app.get('/', function (req, res) {
  res.render('barcode2');
})
app.get('/getTx', function (req, res) {
  var txHash=ethereumModule.getLatest();
  if(txHash!=null&&txHash!="")
  {
    res.send('Latest tx https://ropsten.etherscan.io/tx/'+txHash);
  }
  else
  {
    res.send('No tx yet during current session.');
  }
})
app.get('/getFromEthereum', function (req, res) {
  var txHash=ethereumModule.getLatest();
  if(txHash!=null&&txHash!="")
  {
    var dataToDecrypt = ethereumModule.getFromEthereumFunction(txHash);
    res.send("Packet info fetched from Ethereum: " + cryptoModule.decryptString(dataToDecrypt,cryptoPassword));
  }
  else
  {
    res.send('No tx yet during current session.');
  }
})

//initializing body parser so we can fetch data from text box
app.use(bodyParser.json() );
app.use(bodyParser.urlencoded({extended: true}));
app.use(express.json());
app.use(express.urlencoded());
app.post('/sendpacketid', function (req, res) {
  //Debug in server console
  console.log("String received from the client: "+req.body.packetID);
  var packetIdFromClient=req.body.packetID;
  console.log("String received from the client: "+req.body.companyName);
  var companyNameFromClient=req.body.companyName;
  databaseModule.findCompanyAccountFromDatabase(companyNameFromClient.toUpperCase());
  databaseModule.checkCountForPacket(packetIdFromClient);
  setTimeout(delay,150);
  function delay()
  {
    var toAccount = databaseModule.returnCompanyAccount();
    var txCount = databaseModule.returnCount();
    var activity;
    if(txCount==0||txCount % 2 == 0)
    {
      activity="receive(in)";
    }
    else
    {
      activity="deliver(out)";
    }
    //will be generated by frontend inputs, but hard coding it for now
    var dataToEncrypt="'packetID':'"+packetIdFromClient+"';'activity':'"+activity+"';'userName':'users name here';'companyName':'"+companyNameFromClient+"';'gpsLongitude':'gps here';'gpslatitude':'gps here';'locationByGPS':'address/town here'";
    console.log(dataToEncrypt);
    //crypting
    let encryptedDataToSave = cryptoModule.encryptString(dataToEncrypt,cryptoPassword);
    ethereumModule.saveTransaction(privateKey,fromAccount,toAccount,encryptedDataToSave,packetIdFromClient,companyNameFromClient);
    res.render('barcode2_reply');
  }
  //Post method is too fast for transaction to return its hash identifier in time to use it for saving to database. Database module must be accessed from ethereumModule.
})

//this is the command for geth CLI to start the rpc, unless done with parameters when starting geth
//admin.startRPC("127.0.0.1", 8545, "*", "web3,net,eth")
//correct parameters in this case would be
//geth --testnet --fast --rpc --rpcaddr "127.0.0.1" --rpcport 8545 --rpccorsdomain "http://localhost:8545" --rpcapi "web3,net,eth"
